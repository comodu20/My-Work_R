heart_data <- heart_data %>%
mutate_at(vars(2, 3, 6, 7, 9, 11, 13),
factor)
str(heart_data)
# change "ca" to integer according to UCI website
heart_data$ca <- as.integer(heart_data$ca)
View(heart_data)
str(heart_data)
heart_data[heart_data == "?"] <- NA
str(heart_data)
View(heart_data)
rm(list = ls())
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data"
heart_data <- read.csv(url, header=FALSE)
head(heart_data,10)
library(tidyverse)
library(naniar)     #visualise missing data
library(gtExtras)
miss_var_summary(heart_data) %>%
gt() %>%                                        # everything from here is just themes
gt_theme_guardian() %>%                         #...
tab_header(title = "Missingness of variables")  #...
gg_miss_var(heart_data)
## Table of observations with missing data
heart_data %>%
filter(!complete.cases(.)) %>%        # recall ! => NOT complete cases; (.) => ALL of the data
head(10) %>%
gt() %>%
gt_theme_guardian() %>%
tab_header(title = "Rows that contain missing values")
vis_miss(heart_data)    #numerical distribn of where the values are missing in the number spread
colnames(heart_data) <- c(
"age",
"sex",
"cp",
"trestbps",
"chol",
"fbs",
"restecg",
"thalach",
"exang",
"oldpeak",
"slope",
"ca",
"thal",
"hd"
)
head(heart_data)
str(heart_data)
# continue from line 83 above (did not have missing values);
library(tidyverse)
library(dplyr)
heart_data <- heart_data %>%
mutate(sex =
recode(sex,
`0` = "F",
`1` = "M"))         # backticks (``) are used used around the numerical values to ensure R interprets them correctly.
# This is especially important when you have numerical values that might otherwise be interpreted as variable names.
head(heart_data)
tail(heart_data)
str(heart_data)
as.data.frame(colnames(heart_data))
heart_data <- heart_data %>%
mutate_at(vars(2, 3, 6, 7, 9, 11, 13),
factor)
str(heart_data)
rm(list = ls())
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data"
heart_data <- read.csv(url, header=FALSE)
head(heart_data,10)
## Table of observations with missing data
heart_data %>%
filter(!complete.cases(.)) %>%        # recall ! => NOT complete cases; (.) => ALL of the data
head(10) %>%
gt() %>%
gt_theme_guardian() %>%
tab_header(title = "Rows that contain missing values")
vis_miss(heart_data)    #numerical distribn of where the values are missing in the number spread
colnames(heart_data) <- c(
"age",
"sex",
"cp",
"trestbps",
"chol",
"fbs",
"restecg",
"thalach",
"exang",
"oldpeak",
"slope",
"ca",
"thal",
"hd"
)
str(heart_data)
# continue from line 83 above (did not have missing values);
library(tidyverse)
library(dplyr)
heart_data <- heart_data %>%
mutate(sex =
recode(sex,
`0` = "F",
`1` = "M"))         # backticks (``) are used used around the numerical values to ensure R interprets them correctly.
tail(heart_data)
str(heart_data)
as.data.frame(colnames(heart_data))
heart_data <- heart_data %>%
mutate_at(vars(2, 3, 6, 7, 9, 11),
factor)
str(heart_data)
heart_data$thal <- as.factor(heart_data$thal)
str(heart_data)
heart_data <- heart_data %>%
mutate_at(vars(2, 3, 6, 7, 9, 11,13),
factor)
str(heart_data)
heart_data <- heart_data %>%
mutate_at(vars(2, 3, 6, 7, 9, 10, 11,13),
factor)
str(heart_data)
rm(list = ls())
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data"
heart_data <- read.csv(url, header=FALSE)
library(tidyverse)
library(naniar)     #visualise missing data
library(gtExtras)
colnames(heart_data) <- c(
"age",
"sex",
"cp",
"trestbps",
"chol",
"fbs",
"restecg",
"thalach",
"exang",
"oldpeak",
"slope",
"ca",
"thal",
"hd"
)
head(heart_data)
str(heart_data)
# continue from line 83 above (did not have missing values);
library(tidyverse)
library(dplyr)
heart_data <- heart_data %>%
mutate(sex =
recode(sex,
`0` = "F",
`1` = "M"))         # backticks (``) are used used around the numerical values to ensure R interprets them correctly.
# This is especially important when you have numerical values that might otherwise be interpreted as variable names.
head(heart_data)
tail(heart_data)
str(heart_data)
as.data.frame(colnames(heart_data))
heart_data <- heart_data %>%
mutate_at(vars(2, 3, 6, 7, 9, 11, 12, 13),
factor)
str(heart_data)
View(heart_data)
# change "ca" to integer according to UCI website
heart_data[heart_data == "?"] <- NA
heart_data$ca <- as.integer(heart_data$ca)
heart_data$ca <- as.factor(heart_data$ca)
heart_data$thal <- as.integer(heart_data$thal)
heart_data$thal <- as.factor(heart_data$thal)
str(heart_data)
# change last column "hd"
?mutate_if
View(heart_data)
?ifelse
heart_data$hd <- ifelse(
heart_data ==0,
yes = "Healthy",
no = "Unhealthy"
)
heart_data$hd <- as.factor(heart_data$hd)
rm(list = ls())
url <- "http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data"
heart_data <- read.csv(url, header=FALSE)
head(heart_data,10)
library(tidyverse)
library(naniar)     #visualise missing data
library(gtExtras)
colnames(heart_data) <- c(
"age",
"sex",
"cp",
"trestbps",
"chol",
"fbs",
"restecg",
"thalach",
"exang",
"oldpeak",
"slope",
"ca",
"thal",
"hd"
)
head(heart_data)
str(heart_data)
# continue from line 83 above (did not have missing values);
library(tidyverse)
library(dplyr)
heart_data <- heart_data %>%
mutate(sex =
recode(sex,
`0` = "F",
`1` = "M"))         # backticks (``) are used used around the numerical values to ensure R interprets them correctly.
# This is especially important when you have numerical values that might otherwise be interpreted as variable names.
head(heart_data)
tail(heart_data)
str(heart_data)
as.data.frame(colnames(heart_data))
heart_data <- heart_data %>%
mutate_at(vars(2, 3, 6, 7, 9, 11, 12, 13),
factor)
str(heart_data)
# change "ca" to integer according to UCI website
#basically our op above gives some values ="?", we want to get rid of them
heart_data[heart_data == "?"] <- NA
heart_data$ca <- as.integer(heart_data$ca)
heart_data$ca <- as.factor(heart_data$ca)
heart_data$thal <- as.integer(heart_data$thal)
heart_data$thal <- as.factor(heart_data$thal)
str(heart_data) #output no longer has "?" in the ca and thal sections
heart_data$hd <- ifelse(
heart_data ==0,
yes = "Healthy",
no = "Unhealthy"
)
str(heart_data) #output no longer has "?" in the ca and thal sections
View(heart_data)
heart_data$hd <- as.factor(heart_data$hd)
as.data.frame(colnames(heart_data$hd))
heart_data$hd <- as.factor(heart_data$hd [, -1])
heart_data$hd <- as.factor(heart_data$hd [, 14])
str(heart_data)
#check to see NAs in either "ca" or "thal"
nrow(heart_data[is.na(heart_data$ca) | is.na(heart_data$thal)])
#check to see NAs in either "ca" or "thal"
nrow(heart_data[is.na(heart_data$ca) | is.na(heart_data$thal),])    # The comma at the end in nrow(heart_data[is.na(heart_data$ca) | is.na(heart_data$thal), ]) is crucial because it tells R you're subsetting a data frame (or a matrix) and not just a vector.
#see for example the output of just the logical vectors
is.na(heart_data$ca) | is.na(heart_data$thal)
heart_data[is.na(heart_data$ca) | is.na(heart_data$thal),]
miss_var_summary(heart_data) %>%
gt() %>%
gt_theme_guardian() %>%
tab_header(title = "Missingness of variables")
gg_miss_var(heart_data)
View(airquality)
heart_data %>%
select(ca, thal, thalach, trestbps) %>%
ggplot(aes(x = thalach,
y = trestbps,
size = thal,
colour = is.na(ca))) +
geom_point(alpha = 0.7) +
facet_wrap(~is.na(ca)) +
labs(title = "Missing ca Data by thalach and trestbps",
color = "Missing ca data",
y = "trestbps",
x = "thalach") +
theme_bw()
heart_data %>%
select(ca, thal, sex, hd) %>%
ggplot(aes(x = sex,
y = hd,
size = thal,
colour = is.na(ca))) +
geom_point(alpha = 0.7) +
facet_wrap(~is.na(ca)) +
labs(title = "Missing ca Data by thalach and trestbps",
color = "Missing ca data",
y = "hd",
x = "sex") +
theme_bw()
heart_data <- heart_data[!(is.na(heart_data$ca) | is.na(heart_data$thal))]
heart_data <- heart_data[!(is.na(heart_data$ca) | is.na(heart_data$thal),)]
heart_data <- heart_data[!(is.na(heart_data$ca) | is.na(heart_data$thal)),]
nrow(heart_data)
?xtabs
xtabs(~ hd + sex, heart_data)  # xtabs(...): xtabs stands for "cross-tabulations." It's a function in R that creates multi-dimensional contingency tables from formula specifications.
# do same for chest pain
xtabs(~ hd + cp, heart_data)
xtabs(~ hd + fbs, heart_data)
xtabs(~ hd + restecg, heart_data)
#But you can always trust that a lazy guy like me will find a smart shortcut
?spread
heart_data %>%
group_by(hd, sex) %>%
tally() %>%
spread(hd, n)
other_cols <- names(heart_data)[names(heart_data != "hd")]
other_cols
names(heart_data != "hd")
names(heart_data)
names(heart_data[1:9])
heart_data[c(-1)]
heart_data[c(,-1)]
heart_data[-1]
heart_data[-14]
names(heart_data[-14])
other_cols <- names(heart_data[-14])
#see col name and number
as.data.frame(heart_data)
#see col name and number
as.data.frame(colnames(heart_data))
# Loop through each column and create cross-tabulations
class(other_cols)
# Loop through each column and create cross-tabulations
is.vector(other_cols)
cat("\n") # Add a newline for better readability
for (i in other_col) {
cross_tab <- heart_data %>%
group_by(hd, !!sym(i)) %>% # Use !!sym to dynamically reference column names
tally() %>%
spread(hd, n, fill = 0) # Fill NA with 0
print(paste("Cross-tabulation of hd and", i, ":"))
print(result)
cat("\n") # Add a newline for better readability
}
for (i in other_cols) {
cross_tab <- heart_data %>%
group_by(hd, !!sym(i)) %>% # Use !!sym to dynamically reference column names
tally() %>%
spread(hd, n, fill = 0) # Fill NA with 0
print(paste("Cross-tabulation of hd and", i, ":"))
print(result)
cat("\n") # Add a newline for better readability
}
print(cross_tab)
for (i in other_cols) {
cross_tab <- heart_data %>%
group_by(hd, !!sym(i)) %>% # Use !!sym to dynamically reference column names
tally() %>%
spread(hd, n, fill = 0) # Fill NA with 0
print(paste("Cross-tabulation of hd and", i, ":"))
`print(cross_tab)`                          #`` to see all rows
cat("\n") # Add a newline for better readability
}
for (i in other_cols) {
cross_tab <- heart_data %>%
group_by(hd, !!sym(i)) %>% # Use !!sym to dynamically reference column names
tally() %>%
spread(hd, n, fill = 0) # Fill NA with 0
print(paste("Cross-tabulation of hd and", i, ":"))
print(cross_tab)                         #`` to see all rows
cat("\n") # Add a newline for better readability
}
save.image("~/UK - UEL_UNICAF/Module 1 - Data Ecology/WK3-practice R/Practicing R/Logistic Regression/Log_regression2.RData")
# call the glm func
?glm
#Visualise the data
library(ggplot2)
# Without set.seed()
runif(5)  # Generates 5 random numbers between 0 and 1
runif(5)  # Generates a different set of 5 random numbers
# With set.seed()
set.seed(2)
(
runif(5)  # Generates a specific set of 5 random numbers
# Without set.seed()
runif(5)  # Generates 5 random numbers between 0 and 1
# With set.seed()
set.seed(2)
runif(5)  # Generates a specific set of 5 random numbers
set.seed(2)
runif(5)  # Generates the exact same set of 5 random numbers
set.seed(111)
runif(5)
set.seed(2)
i
set.seed(2)
split <- initial_split(heart_data,
prop = .70,
strata = hd)   #we are stratifying the data by the column entry "Setosa" (with species = setosas, coded as 1s and non setosas coded as 0s)
library(tidymodels)
split <- initial_split(heart_data,
prop = .70,
strata = hd)   #we are stratifying the data by the column entry "Setosa" (with species = setosas, coded as 1s and non setosas coded as 0s)
heart_data_train <- training(split)
heart_data_test <- testing(split)
#Visualise the data
library(ggplot2)
ggplot(heart_data_train,
aes(x =sex,
y =hd)) +
geom_jitter(height = .05,
alpha = .5)
ggplot(heart_data_train,
aes(x =sex,
y =hd)) +
geom_jitter(height = .05,
alpha = .5) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE)
ggplot(heart_data_train,
aes(x =sex,
y =hd)) +
geom_jitter(height = .05,
alpha = .5) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE)
logistic  <- glm(hd ~ sex,  data = heart_data, family = "binomial")
summary(logistic)
logistic <- glm(hd ~., data = heart_data, family = "binomial")
summary(logistic)
ll.null <- logistic$null.deviance/-2
ll.proposed <- logistic$deviance/-2
(ll.null - ll.proposed)/ll.null
1-pchisq(2*(ll.proposed - ll.null), df = (length(logistic$coefficients)-1))
predicted.data <- data.frame(
probability.of.hd = logistic$fitted.values,
hd= heart_data$hd
)
predicted.data <- predicted.data[
order(predicted.data$probability.of.hd,
decreasing = FALSE),
]
predicted.data$rank <- 1:nrow(predicted.data)
library(cowplot)
ggplot(data = predicted.data,
aes(x=rank,
y= probability.of.hd) +
geom_point(aes(color = hd),
alpha = 1,
shape = 4,
stroke = 2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
)
ggplot(data = predicted.data,
aes(x=rank,
y= probability.of.hd) +
geom_point(aes(color = hd),
alpha = 1,
shape = 4,
stroke = 2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
)
ggplot(data = predicted.data,
aes(x=rank, y= probability.of.hd) +
geom_point(aes(color = hd),
alpha = 1,
shape = 4,
stroke = 2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
)
ggplot(data = predicted.data,
aes(x=rank, y= probability.of.hd) + geom_point(aes(color = hd),
alpha = 1,
shape = 4,
stroke = 2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
)
ggplot(data = predicted.data,
aes(x=rank, y= probability.of.hd) + geom_point(aes(color=hd),
alpha = 1,
shape = 4,
stroke = 2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
)
ggplot(data = predicted.data,
aes(x=rank, y= probability.of.hd) + geom_point(aes(color="hd"),
alpha = 1,
shape = 4,
stroke = 2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
)
ggplot(data = predicted.data,
aes(x=rank, y= probability.of.hd) + geom_point(
alpha = 1,
shape = 4,
stroke = 2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
)
ggplot(data = predicted.data,
aes(x=rank, y= probability.of.hd) + geom_point(alpha = 1,
shape = 4,
stroke = 2) +
xlab("Index") +
ylab("Predicted probability of getting heart disease")
)
ggplot(data = predicted.data,
aes(x=rank, y= probability.of.hd)) +
geom_point(aes(color = hd),
alpha = 1,
shape = 4,
stroke = 2)+
xlab("Index") +
ylab("Predicted probability of getting heart disease")
ggplot(data = predicted.data,
aes(x=rank, y= probability.of.hd)) +
geom_point(aes(color = hd),
alpha = 1,
shape = 4,
stroke = 2)+
xlab("Index") +
ylab("Predicted probability of getting heart disease")
ggsave("heart_disease_probabilities.pdf")
