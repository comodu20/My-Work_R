#let's use the death model script
source("~/UK - UEL_UNICAF/Module 1 - Data Ecology/WK3-practice R/Practicing R/Markov Chains/Markov cohort simulation part 2_4 - Time-varying transition probabilities.R", echo=TRUE)
setwd("~/UK - UEL_UNICAF/Module 1 - Data Ecology/WK3-practice R/Practicing R/Markov Chains")
source("~/UK - UEL_UNICAF/Module 1 - Data Ecology/WK3-practice R/Practicing R/Markov Chains/Markov cohort simulation part 2_4 - Time-varying transition probabilities.R", echo=TRUE)
setwd("~/UK - UEL_UNICAF/Module 1 - Data Ecology/WK3-practice R/Practicing R/Markov Chains")
n_t <- 40       #number of cycles
n_s <- 3        #number os states - healthy, diseased, dead
n_c <- 1000     #cohort size
v_state_names <- c("Healthy", "Diseased", "Dead")
trans_mat <- array(NA_real_,
dim = c(n_s, n_t),
dimnames = list(v_state_names,
v_state_names,
cylce = 1:n_t))
trans_mat <- array(NA_real_,
dim = c(n_s, n_s n_t),               #ist dim is the one coming from (n_s) and 2nd dim is the one we're going to (also n_s), and then we need number of cycles (remember 3D -> x, y and t)
trans_mat <- array(NA_real_,
dim = c(n_s, n_s, n_t),               #ist dim is the one coming from (n_s) and 2nd dim is the one we're going to (also n_s), and then we need number of cycles (remember 3D -> x, y and t)
dimnames = list(v_state_names,
v_state_names,
cylce = 1:n_t))
View(trans_mat)
trans_mat
trans_mat[2, 1, 1:n_t] <- 0                     #we know we can't go from state 2 (diseased) to state 1 (healthy) at any time point, so the third entry here for time could be 1:n_t or just left out i.e. [2, 1, ], in any case we equate to 0 for that entry
trans_mat[3, 1, ] <- 0                          #left time entry empty here s explained above
trans_mat[3, 2, ] <- 0
trans_mat[1, 2, ] <- 0.03                  #we know this from the arbirary assignment in 2_2 of this series. Also, we left time entry empty because it applies to all times
trans_mat[3, 3, ] <- 1                    # same as above. Also, dead to dead is for sure duh!
trans_mat[1, 3,  1:10] <- .01          # Prb of dying after being healthy. choosing times 1-10 (imagine that they're age) here and equating to .01 makes sense as if you're young you hve a lower prb
trans_mat[1, 3, 11:20] <- .02
trans_mat[1, 3, 21:30] <- .04
trans_mat[1, 3, 31:40] <- .08
trans_mat[2, 3, ] <- trans_mat[1, 3, ] + .04
trans_mat
trans_mat[2, 2, ] <- 1 - trans_mat[2, 3, ]
trans_mat
trans_mat[1, , ]
trans_mat[1, , 40]    #run this, and get 1 line
sum(trans_mat[1, , 40])
sum(trans_mat[1, , 40], na.rm = TRUE)
###|To avoid the problem above, we Use the apply() func
?apply
trans_mat[1, 1, ] <- 1 - apply(trans_mat[1, , ], 2, sum, na.rm = TRUE)  #See ?apply above. We use 2 as Margin to apply to columns -> think about it we are adding diseased values to dead values across columns
trans_mat
install.packages("learnr")
trans_mat                      #No NAs
state_membership <- array(NA_real_,
dim = c(n_t, n_s),
dimnames = list(cycle = 1:n_t,
state = v_state_names))     #we fill the arrays with NAs at the start bcos we want the first dimension to be the number of cycles and the second to be the number of states
View(state_membership)
for (i in 2:n_t)
{
state_membership[i,] <- state_membership[i - 1, ] %*% trans_mat[ , , i - 1]                #basically this is akin to pi * matrix (A) from Markov lecture 2 (Wk3) in module 4 of UEL
}
state_membership
state_membership <- array(NA_real_,
dim = c(n_t, n_s),
dimnames = list(cycle = 1:n_t,
state = v_state_names))     #we fill the arrays with NAs at the start bcos we want the first dimension to be the number of cycles and the second to be the number of states
View(state_membership)
state_membership[1,] <- c(n_c, 0, 0)  # basically row 1, col 1 is set to n_c = 1000
View(state_membership)
for (i in 2:n_t)
{
state_membership[i,] <- state_membership[i - 1, ] %*% trans_mat[ , , i - 1]                #basically this is akin to pi * matrix (A) from Markov lecture 2 (Wk3) in module 4 of UEL
}
state_membership
#We can show in a plot
?matplot
matplot(1:n_t, state_membership, type = "b")
matplot(1:n_t, state_membership, type = "l")
matplot(1:n_t, state_membership, type = "pl")
matplot(1:n_t, state_membership, type = "l")
#We can show in a plot
?matplot
View(state_membership)
save.image("~/UK - UEL_UNICAF/Module 1 - Data Ecology/WK3-practice R/Practicing R/Markov Chains/Markov cohort simulation part 2_4 - Time-varying transition probabilities.RData")
payoffs <- array(NA_real_,
dim = c(n_s, 2, n_t),                 #recall, its 3D, so we consider the states, two (2) pay offs, "cost" , and "QALY", and number of steps
dimnames = list(state = v_state_names,
payoff = c("Cost", "QALY"),
cycle = 1:n_t))
payoffs
payoffs[ , , 1:10] <- c(10, 800, 0, .95, .65, .00) # so we're filling arrays for cycles 1:10, by column. e.g., the cost of healthy is 10, diseased is 800, dead is 0, the Qualy for healthy is .95, diseased is .65, dead is 0
payoffs
payoffs[ , , 11:20] <- c(25, 1000, 0, .92, .60, .00)
payoffs[ , , 21:300] <- c(40, 1200, 0, .88, .55, .00)
payoffs[ , , 21:30] <- c(40, 1200, 0, .88, .55, .00)
payoffs[ , , 31:40] <- c(80, 1000, 0, .85, .50, .00)
payoffs
payoff_trace <- array(NA_real_,
dim = c(n_t, 2),
dimnames = list(cycle = 1:n_t,
payoff = c("COst", QALY)))
payoff_trace <- array(NA_real_,
dim = c(n_t, 2),
dimnames = list(cycle = 1:n_t,
payoff = c("COst", "QALY")))
payoff_trace
payoff_trace <- array(NA_real_,
dim = c(n_t, 2),
dimnames = list(cycle = 1:n_t,
payoff = c("Cost", "QALY")))
payoff_trace
for (i in 1:n_t) {
payoff_trace[i, ] <- state_membership[i, ] %*% payoffs[ , , i]
}
payoff_trace
colSums(payoff_trace)/n_c       #for avg cost and QALY
matplot(1:n_t, payoff_trace, type = "l", xlab = "Time (steps)", ylab = "Pay off trace")
plot(1:n_t, payoff_trace[ , 2])
save.image("~/UK - UEL_UNICAF/Module 1 - Data Ecology/WK3-practice R/Practicing R/Markov Chains/Markov cohort simulation part 2_4 - Time-varying transition probabilities.RData")
